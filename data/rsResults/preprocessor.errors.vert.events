Ok(EnterFile { file_id: FileId(0), path: "../data/preprocessor.errors.vert" })
Ok(Directive { directive: EventDirective { node: PP_VERSION@0..17, kind: Version(Version { number: 310, profile: Es, parsed_profile: Some(Es) }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 17..19 } "\r\n", token_kind: WS, state: Active })
Ok(Directive { directive: EventDirective { node: PP_DEFINE@19..32, kind: Define(Define { name: "X", kind: Object(DefineObject { tokens: PP_DEFINE_BODY@29..30 }), protected: false }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 32..34 } "\r\n", token_kind: WS, state: Active })
Ok(Directive { directive: EventDirective { node: PP_IF@34..41, kind: If(If { file_id: FileId(0), body: PP_IF_EXPR@38..39 }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_IFDEF@41..53, kind: IfDef(IfDef { ident: "Y" }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_ERROR@53..103, kind: Error(Error { message: "This should not show up in pp output." }), errors: [Located { inner: Processing(ErrorDirective { message: "This should not show up in pp output." }), pos: 53..103, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 6, column: 0 }], source_id: FileId(0) }, masked: true })
Ok(Directive { directive: EventDirective { node: PP_ENDIF@103..113, kind: EndIf(EndIf), errors: [], source_id: FileId(0) }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_ERROR@113..159, kind: Error(Error { message: "This should show up in pp output." }), errors: [Located { inner: Processing(ErrorDirective { message: "This should show up in pp output." }), pos: 113..159, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 8, column: 0 }], source_id: FileId(0) }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_ELSE@159..166, kind: Else(Else), errors: [], source_id: FileId(0) }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_ERROR@166..214, kind: Error(Error { message: "This should not show up in pp output." }), errors: [Located { inner: Processing(ErrorDirective { message: "This should not show up in pp output." }), pos: 166..214, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 10, column: 0 }], source_id: FileId(0) }, masked: true })
Ok(Directive { directive: EventDirective { node: PP_ENDIF@214..222, kind: EndIf(EndIf), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 222..224 } "\r\n", token_kind: WS, state: Active })
Ok(Error { error: Located { inner: Parse(Unexpected { actual: NEWLINE, expected: [COLON] }), pos: 224..232, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 13, column: 0 }, masked: false })
Ok(Directive { directive: EventDirective { node: ERROR@224..232, kind: Invalid(Invalid), errors: [], source_id: FileId(0) }, masked: false })
Ok(Error { error: Located { inner: Parse(UnknownPreprocessorDirective { name: "def" }), pos: 232..239, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 14, column: 0 }, masked: false })
Ok(Directive { directive: EventDirective { node: PP_IF@232..239, kind: If(If { file_id: FileId(0), body: PP_IF_EXPR@236..237 }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 239..241 } "\r\n", token_kind: WS, state: Masked })
Ok(Error { error: Located { inner: Processing(DirectiveExtension(MissingExtensionBehavior { name: Specific(Atom('a' type=inline)) })), pos: 241..255, current_file: Some(FileId(0)), path: None, file_override: None, line_number: 16, column: 0 }, masked: true })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 255..257 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: IDENT_KW@NodeSpan { source_id: FileId(0), range: 257..260 } "int", token_kind: TYPE_NAME(INT), state: Masked })
Ok(Token { source_token: WS@NodeSpan { source_id: FileId(0), range: 260..261 } " ", token_kind: WS, state: Masked })
Ok(Token { source_token: IDENT_KW@NodeSpan { source_id: FileId(0), range: 261..265 } "main", token_kind: IDENT("main"), state: Masked })
Ok(Token { source_token: LPAREN@NodeSpan { source_id: FileId(0), range: 265..266 } "(", token_kind: LPAREN, state: Masked })
Ok(Token { source_token: RPAREN@NodeSpan { source_id: FileId(0), range: 266..267 } ")", token_kind: RPAREN, state: Masked })
Ok(Token { source_token: WS@NodeSpan { source_id: FileId(0), range: 267..268 } " ", token_kind: WS, state: Masked })
Ok(Token { source_token: LBRACE@NodeSpan { source_id: FileId(0), range: 268..269 } "{", token_kind: LBRACE, state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 269..271 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: RBRACE@NodeSpan { source_id: FileId(0), range: 271..272 } "}", token_kind: RBRACE, state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 272..274 } "\r\n", token_kind: WS, state: Masked })
