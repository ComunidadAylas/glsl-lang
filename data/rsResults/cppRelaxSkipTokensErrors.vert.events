Ok(EnterFile { file_id: FileId(0), path: "../data/cppRelaxSkipTokensErrors.vert", canonical_path: "/data/cppRelaxSkipTokensErrors.vert" })
Ok(Directive { directive: EventDirective { node: PP_VERSION@0..14, kind: Version(Version { number: 110, profile: None, parsed_profile: Some(None) }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 14..16 } "\r\n", token_kind: WS, state: Active })
Ok(Directive { directive: EventDirective { node: PP_IF@16..23, kind: If(If { file_id: FileId(0), body: PP_IF_EXPR@20..21 }), errors: [], source_id: FileId(0) }, masked: false })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 23..27 } "3.5L", token_kind: ERROR(InvalidFloatLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 27..29 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 29..33 } "3.5h", token_kind: ERROR(InvalidFloatLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 33..35 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 35..40 } "2034h", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 40..42 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 42..44 } "1.", token_kind: FLOAT_CONST(1.0), state: Masked })
Ok(Token { source_token: HASH@NodeSpan { source_id: FileId(0), range: 44..45 } "#", token_kind: HASH, state: Masked })
Ok(Token { source_token: IDENT_KW@NodeSpan { source_id: FileId(0), range: 45..48 } "INF", token_kind: IDENT("INF"), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 48..50 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 50..66 } "0x1234567812345L", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 66..68 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 68..89 } "12323394203923879234L", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 89..91 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 91..96 } "0123s", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: SEMICOLON@NodeSpan { source_id: FileId(0), range: 96..97 } ";", token_kind: SEMICOLON, state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 97..99 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 99..103 } "123s", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: SEMICOLON@NodeSpan { source_id: FileId(0), range: 103..104 } ";", token_kind: SEMICOLON, state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 104..106 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: DIGITS@NodeSpan { source_id: FileId(0), range: 106..126 } "0123456712345671234L", token_kind: ERROR(InvalidIntLiteral), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 126..128 } "\r\n", token_kind: WS, state: Masked })
Ok(Token { source_token: QUOTE_STRING@NodeSpan { source_id: FileId(0), range: 128..136 } "\"string\"", token_kind: ERROR(InvalidToken), state: Masked })
Ok(Token { source_token: NEWLINE@NodeSpan { source_id: FileId(0), range: 136..138 } "\r\n", token_kind: WS, state: Masked })
Ok(Directive { directive: EventDirective { node: PP_ENDIF@138..146, kind: EndIf(EndIf), errors: [], source_id: FileId(0) }, masked: false })
